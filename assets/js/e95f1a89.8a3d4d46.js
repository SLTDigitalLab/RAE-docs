"use strict";(self.webpackChunkrae_docs=self.webpackChunkrae_docs||[]).push([[2501],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>k});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function s(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),p=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},u=function(t){var e=p(t.components);return a.createElement(o.Provider,{value:e},t.children)},d="mdxType",c={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},m=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,o=t.parentName,u=s(t,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(o,".").concat(m)]||d[m]||c[m]||i;return n?a.createElement(k,l(l({ref:e},u),{},{components:n})):a.createElement(k,l({ref:e},u))}));function k(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in e)hasOwnProperty.call(e,o)&&(s[o]=e[o]);s.originalType=t,s[d]="string"==typeof t?t:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2338:(t,e,n)=>{n.r(e),n.d(e,{Tooltip:()=>u,assets:()=>o,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:2},l="Naive Bayes Classification",s={unversionedId:"api-engine/Quick Analysis/Classification/naive-bayes-classification",id:"api-engine/Quick Analysis/Classification/naive-bayes-classification",title:"Naive Bayes Classification",description:"Naive Bayes is a classification algorithm based on Bayes' theorem with the assumption of independence between features. Despite its simplistic assumptions, Naive Bayes is a popular and effective algorithm for text classification tasks, such as spam filtering or sentiment analysis.",source:"@site/docs/api-engine/Quick Analysis/Classification/naive-bayes-classification.mdx",sourceDirName:"api-engine/Quick Analysis/Classification",slug:"/api-engine/Quick Analysis/Classification/naive-bayes-classification",permalink:"/docs/api-engine/Quick Analysis/Classification/naive-bayes-classification",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/api-engine/Quick Analysis/Classification/naive-bayes-classification.mdx",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Artificial Neural Network Classification",permalink:"/docs/api-engine/Quick Analysis/Classification/ann-classification"},next:{title:"Random Forest Classification",permalink:"/docs/api-engine/Quick Analysis/Classification/random-forest-classification"}},o={},p=[{value:"Authorization",id:"authorization",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Types",id:"types",level:3},{value:"Sample",id:"sample",level:3},{value:"Reponse Body",id:"reponse-body",level:2},{value:"Types",id:"types-1",level:3},{value:"Sample",id:"sample-1",level:3}],u=t=>{let{children:e,color:n}=t;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"20px",color:"#fff",padding:"7px",cursor:"pointer",fontWeight:"750",fontSize:"15px",position:"relative",bottom:"4px"},onClick:()=>{alert(`You clicked the color ${n} with label ${e}`)}},e)},d={toc:p,Tooltip:u};function c(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"naive-bayes-classification"},"Naive Bayes Classification"),(0,r.kt)("p",null,"Naive Bayes is a classification algorithm based on Bayes' theorem with the assumption of independence between features. Despite its simplistic assumptions, Naive Bayes is a popular and effective algorithm for text classification tasks, such as spam filtering or sentiment analysis."),(0,r.kt)(u,{color:"green",mdxType:"Tooltip"},"POST"),(0,r.kt)("div",{style:{marginBottom:"20px"}}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"https://engine.raccoon-ai.io/api/v1/ml/classification/naivebayes\n")),(0,r.kt)("h2",{id:"authorization"},"Authorization"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"API Key"),(0,r.kt)("td",{parentName:"tr",align:null},"X-Api-Key"),(0,r.kt)("td",{parentName:"tr",align:null},"rae","_","######")))),(0,r.kt)("h2",{id:"request-body"},"Request Body"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Section"),(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"train"),(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Data that use to train the model")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"features"),(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Input features (X)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"targets"),(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Output targets (y)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"config"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Train configurations")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"predict"),(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Data that need to predicted by the trained model")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"config"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Predict configurations")))),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "train"   : {\n        "data"    : <json_data>,\n        "features": <list>,\n        "targets" : <list>,\n        "config"  : {\n                "std_scale": <boolean>,\n                "encoder"  : <"label" | "drop">\n            }\n    },\n    "predict": {\n        "data": <json_data>,\n        "config": {\n            "include_inputs": <boolean>,\n            "round": <int>\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"sample"},"Sample"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "train": {\n    "data": {\n      "R&D Spend": {\n        "0": 165349.2,\n        "1": 162597.7,\n        "2": 153441.51,\n        "3": 144372.41,\n        "4": 142107.34,\n        "5": 131876.9,\n        "6": 134615.46,\n        "7": 130298.13,\n        "8": 120542.52,\n        "9": 123334.88\n      },\n      "Administration": {\n        "0": 136897.8,\n        "1": 151377.59,\n        "2": 101145.55,\n        "3": 118671.85,\n        "4": 91391.77,\n        "5": 99814.71,\n        "6": 147198.87,\n        "7": 145530.06,\n        "8": 148718.95,\n        "9": 108679.17\n      },\n      "Marketing Spend": {\n        "0": 471784.1,\n        "1": 443898.53,\n        "2": 407934.54,\n        "3": 383199.62,\n        "4": 366168.42,\n        "5": 362861.36,\n        "6": 127716.82,\n        "7": 323876.68,\n        "8": 311613.29,\n        "9": 304981.62\n      },\n      "State": {\n        "0": "New York",\n        "1": "California",\n        "2": "Florida",\n        "3": "New York",\n        "4": "Florida",\n        "5": "New York",\n        "6": "California",\n        "7": "Florida",\n        "8": "New York",\n        "9": "California"\n      },\n      "Profit": {\n        "0": 192261.83,\n        "1": 191792.06,\n        "2": 191050.39,\n        "3": 182901.99,\n        "4": 166187.94,\n        "5": 156991.12,\n        "6": 156122.51,\n        "7": 155752.6,\n        "8": 152211.77,\n        "9": 149759.96\n      }\n    },\n    "features": ["R&D Spend", "Administration", "Marketing Spend", "Profit"],\n    "targets": ["State"],\n    "config": {\n      "std_scale": true,\n      "encoder": "label"\n    }\n  },\n  "predict": {\n    "data": {\n      "R&D Spend": {\n        "0": 165349.2,\n        "1": 162597.7\n      },\n      "Administration": {\n        "0": 136897.8,\n        "1": 151377.59\n      },\n      "Marketing Spend": {\n        "0": 471784.1,\n        "1": 443898.53\n      },\n      "Profit": {\n        "0": 471784.1,\n        "1": 443898.53\n      }\n    },\n    "config": {\n      "include_inputs": true,\n      "round": 2\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"reponse-body"},"Reponse Body"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"success"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Indicate the success of the request")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"msg"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Message indicators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"error"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Error information, only set if success is false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"result"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"Result, only set if success is true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"score"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"Accuracy scores of the training and testing phases, only set if success is true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"generated_ts"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"Generated timestamp")))),(0,r.kt)("h3",{id:"types-1"},"Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "success": <boolean>,\n    "msg": <string>,\n    "error": <string>,\n    "result": <json>,\n    "score": {\n        "train": <float>,\n        "test": <float>\n    },\n    "generated_ts": <timestamp>\n}\n')),(0,r.kt)("h3",{id:"sample-1"},"Sample"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "success": true,\n  "msg": "Model trained and predicted successfully",\n  "error": null,\n  "result": {\n    "R&D Spend": {\n      "0": 165349.2,\n      "1": 162597.7\n    },\n    "Administration": {\n      "0": 136897.8,\n      "1": 151377.59\n    },\n    "Marketing Spend": {\n      "0": 471784.1,\n      "1": 443898.53\n    },\n    "Profit": {\n      "0": 190209.72,\n      "1": 186863.18\n    },\n    "State": {\n      "0": "New York",\n      "1": "California"\n    }\n  },\n  "score": {\n    "train": 0.942446542689397,\n    "test": 0.9649618042060305\n  },\n  "saved_in": null,\n  "generated_ts": 1685439220.425382\n}\n')))}c.isMDXComponent=!0}}]);