"use strict";(self.webpackChunkrae_docs=self.webpackChunkrae_docs||[]).push([[1703],{3905:(t,e,n)=>{n.d(e,{Zo:()=>m,kt:()=>g});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var s=a.createContext({}),d=function(t){var e=a.useContext(s),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=d(t.components);return a.createElement(s.Provider,{value:e},t.children)},p="mdxType",u={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,m=o(t,["components","mdxType","originalType","parentName"]),p=d(n),k=r,g=p["".concat(s,".").concat(k)]||p[k]||u[k]||l;return n?a.createElement(g,i(i({ref:e},m),{},{components:n})):a.createElement(g,i({ref:e},m))}));function g(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=k;var o={};for(var s in e)hasOwnProperty.call(e,s)&&(o[s]=e[s]);o.originalType=t,o[p]="string"==typeof t?t:r,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},2700:(t,e,n)=>{n.r(e),n.d(e,{Tooltip:()=>m,assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>o,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const l={sidebar_position:3},i="Gradient Boosting Regression",o={unversionedId:"api-engine/Quick Analysis/Regression/gradient-boosting-regression",id:"api-engine/Quick Analysis/Regression/gradient-boosting-regression",title:"Gradient Boosting Regression",description:"Gradient Boosting regression is a machine learning technique used for solving regression problems. It is an ensemble method that combines multiple weak prediction models, typically decision trees, to create a strong predictive model. The key idea behind gradient boosting regression is to iteratively train new models that focus on the errors made by the previous models, gradually improving the overall prediction accuracy.",source:"@site/docs/api-engine/Quick Analysis/Regression/gradient-boosting-regression.mdx",sourceDirName:"api-engine/Quick Analysis/Regression",slug:"/api-engine/Quick Analysis/Regression/gradient-boosting-regression",permalink:"/docs/api-engine/Quick Analysis/Regression/gradient-boosting-regression",draft:!1,editUrl:"https://github.com/SLTDigitalLab/RAE-docs/tree/main/docs/api-engine/Quick Analysis/Regression/gradient-boosting-regression.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Artificial Neural Network Regression",permalink:"/docs/api-engine/Quick Analysis/Regression/ann-regression"},next:{title:"Random Forest Regression",permalink:"/docs/api-engine/Quick Analysis/Regression/random-forest-regression"}},s={},d=[{value:"Authorization",id:"authorization",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Types",id:"types",level:3},{value:"Sample",id:"sample",level:3},{value:"Hyper Parameters",id:"hyper-parameters",level:2},{value:"Reponse Body",id:"reponse-body",level:2},{value:"Types",id:"types-1",level:3},{value:"Sample",id:"sample-1",level:3}],m=t=>{let{children:e,color:n}=t;return(0,r.kt)("span",{style:{backgroundColor:n,borderRadius:"20px",color:"#fff",padding:"7px",cursor:"pointer",fontWeight:"750",fontSize:"15px",position:"relative",bottom:"4px"},onClick:()=>{alert(`You clicked the color ${n} with label ${e}`)}},e)},p={toc:d,Tooltip:m};function u(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"gradient-boosting-regression"},"Gradient Boosting Regression"),(0,r.kt)("p",null,"Gradient Boosting regression is a machine learning technique used for solving regression problems. It is an ensemble method that combines multiple weak prediction models, typically decision trees, to create a strong predictive model. The key idea behind gradient boosting regression is to iteratively train new models that focus on the errors made by the previous models, gradually improving the overall prediction accuracy."),(0,r.kt)(m,{color:"#3abe25",mdxType:"Tooltip"},"Method: POST")," ",(0,r.kt)(m,{color:"#Be2525",mdxType:"Tooltip"},"Authorization: API Key"),(0,r.kt)("div",{style:{marginBottom:"20px"}}),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"https://engine.raccoon-ai.io/api/v1/ml/regression/gradboost\n")),(0,r.kt)("h2",{id:"authorization"},"Authorization"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"API Key"),(0,r.kt)("td",{parentName:"tr",align:null},"X-Api-Key"),(0,r.kt)("td",{parentName:"tr",align:null},"rae","_","######")))),(0,r.kt)("h2",{id:"request-body"},"Request Body"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Section"),(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Required"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"train"),(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Data that use to train the model")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"features"),(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Input features (X)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"targets"),(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Output targets (y)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"config"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Train configurations")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"predict"),(0,r.kt)("td",{parentName:"tr",align:null},"data"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Data that need to predicted by the trained model")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"config"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Predict configurations")))),(0,r.kt)("h3",{id:"types"},"Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "train"   : {\n        "data"    : <json_data>,\n        "features": <list>,\n        "targets" : <list>,\n        "config"  : {\n                "std_scale": <boolean>,\n                "encoder"  : <"onehot" | "label" | "drop">,\n                "val_size" : <float>\n            }\n    },\n    "predict": {\n        "data": <json_data>,\n        "config": {\n            "include_inputs": <boolean>,\n            "round": <int>\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"sample"},"Sample"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "train": {\n    "data": {\n      "R&D Spend": {\n        "0": 165349.2,\n        "1": 162597.7,\n        "2": 153441.51,\n        "3": 144372.41,\n        "4": 142107.34,\n        "5": 131876.9,\n        "6": 134615.46,\n        "7": 130298.13,\n        "8": 120542.52,\n        "9": 123334.88\n      },\n      "Administration": {\n        "0": 136897.8,\n        "1": 151377.59,\n        "2": 101145.55,\n        "3": 118671.85,\n        "4": 91391.77,\n        "5": 99814.71,\n        "6": 147198.87,\n        "7": 145530.06,\n        "8": 148718.95,\n        "9": 108679.17\n      },\n      "Marketing Spend": {\n        "0": 471784.1,\n        "1": 443898.53,\n        "2": 407934.54,\n        "3": 383199.62,\n        "4": 366168.42,\n        "5": 362861.36,\n        "6": 127716.82,\n        "7": 323876.68,\n        "8": 311613.29,\n        "9": 304981.62\n      },\n      "State": {\n        "0": "New York",\n        "1": "California",\n        "2": "Florida",\n        "3": "New York",\n        "4": "Florida",\n        "5": "New York",\n        "6": "California",\n        "7": "Florida",\n        "8": "New York",\n        "9": "California"\n      },\n      "Profit": {\n        "0": 192261.83,\n        "1": 191792.06,\n        "2": 191050.39,\n        "3": 182901.99,\n        "4": 166187.94,\n        "5": 156991.12,\n        "6": 156122.51,\n        "7": 155752.6,\n        "8": 152211.77,\n        "9": 149759.96\n      }\n    },\n    "features": ["R&D Spend", "Administration", "Marketing Spend", "State"],\n    "targets": ["Profit"],\n    "config": {\n      "std_scale": true,\n      "encoder": "onehot"\n    }\n  },\n  "predict": {\n    "data": {\n      "R&D Spend": {\n        "0": 165349.2,\n        "1": 162597.7\n      },\n      "Administration": {\n        "0": 136897.8,\n        "1": 151377.59\n      },\n      "Marketing Spend": {\n        "0": 471784.1,\n        "1": 443898.53\n      },\n      "State": {\n        "0": "New York",\n        "1": "California"\n      }\n    },\n    "config": {\n      "include_inputs": true,\n      "round": 2\n    }\n  }\n}\n')),(0,r.kt)("h2",{id:"hyper-parameters"},"Hyper Parameters"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Parameter"),(0,r.kt)("th",{parentName:"tr",align:null},"Data type"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loss"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"squared_error")," ",(0,r.kt)("inlineCode",{parentName:"td"},"absolute_error")," ",(0,r.kt)("inlineCode",{parentName:"td"},"huber")," ",(0,r.kt)("inlineCode",{parentName:"td"},"quantile")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"squared_error")),(0,r.kt)("td",{parentName:"tr",align:null},"Loss function to be optimized. \u2018squared_error\u2019 refers to the squared error for regression. \u2018absolute_error\u2019 refers to the absolute error of regression and is a robust loss function. \u2018huber\u2019 is a combination of the two. \u2018quantile\u2019 allows quantile regression (use alpha to specify the quantile)."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"learning_rate"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.1"),(0,r.kt)("td",{parentName:"tr",align:null},"Learning rate shrinks the contribution of each tree by ",(0,r.kt)("inlineCode",{parentName:"td"},"learning_rate"),". There is a trade-off between learning_rate and n_estimators. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[0.0, inf)"),".",(0,r.kt)("br",null)),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"n_estimators"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"n_estimators : int, default=100"),(0,r.kt)("br",null),"The number of boosting stages to perform. Gradient boosting is fairly robust to over-fitting so a large number usually results in better performance. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[1, inf)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"subsample"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"1.0"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"subsample : float, default=1.0"),(0,r.kt)("br",null),"The fraction of samples to be used for fitting the individual base learners. If smaller than 1.0 this results in Stochastic Gradient Boosting. subsample interacts with the parameter n_estimators. Choosing subsample < 1.0 leads to a reduction of variance and an increase in bias. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"(0.0, 1.0]"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"criterion"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"friedman_mse")," ",(0,r.kt)("inlineCode",{parentName:"td"},"squared_error")),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"criterion : {\u2018friedman_mse\u2019, \u2018squared_error\u2019}, default=\u2019friedman_mse\u2019"),(0,r.kt)("br",null),"The function to measure the quality of a split. Supported criteria are \u201cfriedman_mse\u201d for the mean squared error with improvement score by Friedman, \u201csquared_error\u201d for mean squared error. The default value of \u201cfriedman_mse\u201d is generally the best as it can provide a better approximation in some cases."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_samples_split"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")," ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"min_samples_split : int or float, default=2"),(0,r.kt)("br",null)," The minimum number of samples required to split an internal node: ",(0,r.kt)("br",null)," ",(0,r.kt)("em",{parentName:"td"}," If int, values must be in the range ",(0,r.kt)("inlineCode",{parentName:"em"},"[2, inf)"),". ",(0,r.kt)("br",null)," ")," If float, values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"(0.0, 1.0]")," and min_samples_split will be ceil(min_samples_split ","*"," n_samples)."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_samples_leaf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")," ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"min_samples_leaf : int or float, default=1"),(0,r.kt)("br",null)," The minimum number of samples required to be at a leaf node. A split point at any depth will only be considered if it leaves at least min_samples_leaf training samples in each of the left and right branches. This may have the effect of smoothing the model, especially in regression. ",(0,r.kt)("br",null),"If int, values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[1, inf)"),". ",(0,r.kt)("br",null),"If float, values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"(0.0, 1.0)")," and min_samples_leaf will be",(0,r.kt)("inlineCode",{parentName:"td"}," ceil(min_samples_leaf * n_samples)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_weight_fraction_leaf"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"min_weight_fraction_leaf : float, default=0.0"),(0,r.kt)("br",null)," The minimum weighted fraction of the sum total of weights (of all the input samples) required to be at a leaf node. Samples have equal weight when sample_weight is not provided. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[0.0, 0.5]"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max_depth"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"max_depth : int or None, default=3"),(0,r.kt)("br",null),"Maximum depth of the individual regression estimators. The maximum depth limits the number of nodes in the tree. Tune this parameter for best performance; the best value depends on the interaction of the input variables. If None, then nodes are expanded until all leaves are pure or until all leaves contain less than min_samples_split samples. If int, values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[1, inf)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_impurity_decrease"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"min_impurity_decrease : float, default=0.0"),(0,r.kt)("br",null)," A node will be split if this split induces a decrease of the impurity greater than or equal to this value. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[0.0, inf)"),". ",(0,r.kt)("br",null)," ",(0,r.kt)("inlineCode",{parentName:"td"}," ")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_impurity_decrease"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"A node will be split if this split induces a decrease of the impurity greater than or equal to this value. Values must be in the range [0.0, inf)."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"min_impurity_decrease"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"The weighted impurity decrease equation is the following"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"init"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"estimator")," or \u2018zero\u2019"),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},"An estimator object that is used to compute the initial predictions. ",(0,r.kt)("inlineCode",{parentName:"td"},"init")," has to provide fit and predict. If \u2018zero\u2019, the initial raw predictions are set to zero. By default a ",(0,r.kt)("inlineCode",{parentName:"td"},"DummyEstimator")," is used, predicting either the average target value (for loss=\u2019squared_error\u2019), or a quantile for the other losses."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"random_state"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"td"},"RandomState")," instance or ",(0,r.kt)("inlineCode",{parentName:"td"},"None")),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},"Controls the random seed given to each Tree estimator at each boosting iteration. In addition, it controls the random permutation of the features at each split (see Notes for more details). It also controls the random splitting of the training data to obtain a validation set if ",(0,r.kt)("inlineCode",{parentName:"td"},"n_iter_no_change")," is not None. Pass an int for reproducible output across multiple function calls."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max_features"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"auto")," ",(0,r.kt)("inlineCode",{parentName:"td"},"sqrt")," ",(0,r.kt)("inlineCode",{parentName:"td"},"log")," , ",(0,r.kt)("inlineCode",{parentName:"td"},"int")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of features to consider when looking for the best split: If int, values must be in the range ","[1, inf). If float, values must be in the range (0.0, 1.0]"," and the features considered at each split will be ",(0,r.kt)("inlineCode",{parentName:"td"},"max(1, int(max_features * n_features_in_))"),". ",(0,r.kt)("br",null),"If \u201cauto\u201d, then ",(0,r.kt)("inlineCode",{parentName:"td"},"max_features=n_features"),".",(0,r.kt)("br",null),"If \u201csqrt\u201d, then ",(0,r.kt)("inlineCode",{parentName:"td"},"max_features=sqrt(n_features)"),".",(0,r.kt)("br",null),"If \u201clog2\u201d, then ",(0,r.kt)("inlineCode",{parentName:"td"},"max_features=log2(n_features)"),".",(0,r.kt)("br",null),"If None, then ",(0,r.kt)("inlineCode",{parentName:"td"},"max_features=n_features"),".",(0,r.kt)("br",null),"Choosing ",(0,r.kt)("inlineCode",{parentName:"td"},"max_features < n_features")," leads to a reduction of variance and an increase in bias.",(0,r.kt)("br",null),"Note: the search for a split does not stop until at least one valid partition of the node samples is found, even if it requires to effectively inspect more than ",(0,r.kt)("inlineCode",{parentName:"td"},"max_features")," features."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"alpha"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.9"),(0,r.kt)("td",{parentName:"tr",align:null},"The alpha-quantile of the huber loss function and the quantile loss function. Only if ",(0,r.kt)("inlineCode",{parentName:"td"},"loss='huber'")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"loss='quantile'"),". Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"(0.0, 1.0)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max_leaf_nodes"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},"Grow trees with ",(0,r.kt)("inlineCode",{parentName:"td"},"max_leaf_nodes")," in best-first fashion. Best nodes are defined as relative reduction in impurity. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[2, inf)"),". If None, then unlimited number of leaf nodes."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"warm_start"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"bool")),(0,r.kt)("td",{parentName:"tr",align:null},"False"),(0,r.kt)("td",{parentName:"tr",align:null},"When set to True, reuse the solution of the previous call to fit and add more estimators to the ensemble, otherwise, just erase the previous solution."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"validation_fraction"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.1"),(0,r.kt)("td",{parentName:"tr",align:null},"The proportion of training data to set aside as validation set for early stopping. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"(0.0, 1.0)"),". Only used if ",(0,r.kt)("inlineCode",{parentName:"td"},"n_iter_no_change")," is set to an integer."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"n_iter_no_change"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"None"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"n_iter_no_change")," is used to decide if early stopping will be used to terminate training when validation score is not improving. By default it is set to None to disable early stopping. If set to a number, it will set aside validation_fraction size of the training data as validation and terminate training when validation score is not improving in all of the previous ",(0,r.kt)("inlineCode",{parentName:"td"},"n_iter_no_change")," numbers of iterations. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[1, inf)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tol"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"float")),(0,r.kt)("td",{parentName:"tr",align:null},"1e-4"),(0,r.kt)("td",{parentName:"tr",align:null},"Tolerance for the early stopping. When the loss is not improving by at least tol for ",(0,r.kt)("inlineCode",{parentName:"td"},"n_iter_no_change")," iterations (if set to a number), the training stops. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[0.0, inf)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ccp_alpha"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"non-negative float")),(0,r.kt)("td",{parentName:"tr",align:null},"0.0"),(0,r.kt)("td",{parentName:"tr",align:null},"Complexity parameter used for Minimal Cost-Complexity Pruning. The subtree with the largest cost complexity that is smaller than ",(0,r.kt)("inlineCode",{parentName:"td"},"ccp_alpha")," will be chosen. By default, no pruning is performed. Values must be in the range ",(0,r.kt)("inlineCode",{parentName:"td"},"[0.0, inf)"),"."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Attribute"),(0,r.kt)("th",{parentName:"tr",align:null},"Data type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null}))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ccp_alpha"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ndarray of shape (n_features,)  ")),(0,r.kt)("td",{parentName:"tr",align:null},"The impurity-based feature importances."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"oob",(0,r.kt)("em",{parentName:"td"},"improvement")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ndarray of shape (n_estimators,)")),(0,r.kt)("td",{parentName:"tr",align:null},"The improvement in loss (= deviance) on the out-of-bag samples relative to the previous iteration. ",(0,r.kt)("inlineCode",{parentName:"td"},"oob_improvement_[0]")," is the improvement in loss of the first stage over the init estimator. Only available if ",(0,r.kt)("inlineCode",{parentName:"td"},"subsample < 1.0")),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"train",(0,r.kt)("em",{parentName:"td"},"score")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ndarray of shape (n_estimators,)  ")),(0,r.kt)("td",{parentName:"tr",align:null},"The i-th score ",(0,r.kt)("inlineCode",{parentName:"td"},"train_score_[i]")," is the deviance (= loss) of the model at iteration ",(0,r.kt)("inlineCode",{parentName:"td"},"i")," on the in-bag sample. If ",(0,r.kt)("inlineCode",{parentName:"td"},"subsample == 1")," this is the deviance on the training data."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"loss","_"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LossFunction")),(0,r.kt)("td",{parentName:"tr",align:null},"The concrete ",(0,r.kt)("inlineCode",{parentName:"td"},"LossFunction")," object."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"init","_"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"estimator")),(0,r.kt)("td",{parentName:"tr",align:null},"The estimator that provides the initial predictions. Set via the init argument or loss.init_estimator."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"estimators","_"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ndarray of DecisionTreeRegressor of shape (n_estimators, 1)")),(0,r.kt)("td",{parentName:"tr",align:null},"The collection of fitted sub-estimators."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"n",(0,r.kt)("em",{parentName:"td"},"estimators")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"The number of estimators as selected by early stopping (if ",(0,r.kt)("inlineCode",{parentName:"td"},"n_iter_no_change")," is specified). Otherwise it is set to ",(0,r.kt)("inlineCode",{parentName:"td"},"n_estimators"),"."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"n",(0,r.kt)("em",{parentName:"td"},"features_in")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"int")),(0,r.kt)("td",{parentName:"tr",align:null},"Number of features seen during fit."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"feature",(0,r.kt)("em",{parentName:"td"},"names_in")),(0,r.kt)("td",{parentName:"tr",align:null},"ndarray of shape (n",(0,r.kt)("em",{parentName:"td"},"features_in"),",)"),(0,r.kt)("td",{parentName:"tr",align:null},"Names of features seen during fit. Defined only when X has feature names that are all strings."),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"max",(0,r.kt)("em",{parentName:"td"},"features")),(0,r.kt)("td",{parentName:"tr",align:null},"int"),(0,r.kt)("td",{parentName:"tr",align:null},"The inferred value of max_features."),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"reponse-body"},"Reponse Body"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Key"),(0,r.kt)("th",{parentName:"tr",align:null},"Data Type"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"success"),(0,r.kt)("td",{parentName:"tr",align:null},"boolean"),(0,r.kt)("td",{parentName:"tr",align:null},"Indicate the success of the request")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"msg"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Message indicators")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"error"),(0,r.kt)("td",{parentName:"tr",align:null},"string"),(0,r.kt)("td",{parentName:"tr",align:null},"Error information, only set if success is false")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"result"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"Result, only set if success is true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"score"),(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"r2_scores of the training and testing phases, only set if success is true")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"generated_ts"),(0,r.kt)("td",{parentName:"tr",align:null},"float"),(0,r.kt)("td",{parentName:"tr",align:null},"Generated timestamp")))),(0,r.kt)("h3",{id:"types-1"},"Types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "success": <boolean>,\n    "msg": <string>,\n    "error": <string>,\n    "result": <json>,\n    "score": {\n        "train": <float>,\n        "test": <float>\n    },\n    "generated_ts": <timestamp>\n}\n')),(0,r.kt)("h3",{id:"sample-1"},"Sample"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "success": true,\n  "msg": "Model trained and predicted successfully",\n  "error": null,\n  "result": {\n    "R&D Spend": {\n      "0": 165349.2,\n      "1": 162597.7\n    },\n    "Administration": {\n      "0": 136897.8,\n      "1": 151377.59\n    },\n    "Marketing Spend": {\n      "0": 471784.1,\n      "1": 443898.53\n    },\n    "State": {\n      "0": "New York",\n      "1": "California"\n    },\n    "Profit": {\n      "0": 190209.72,\n      "1": 186863.18\n    }\n  },\n  "score": {\n    "train": 0.942446542689397,\n    "test": 0.9649618042060305\n  },\n  "saved_in": null,\n  "generated_ts": 1685439220.425382\n}\n')))}u.isMDXComponent=!0}}]);